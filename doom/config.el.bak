;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!
(setq mac-option-key-is-meta nil)
(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)

(setq scroll-margin 20)

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Mark Graham-Smith"
      user-mail-address "markianjosephsmith@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-unicode-font' -- for unicode glyphs
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!
;;
;; FONTS
(setq doom-font
  (font-spec :family "FiraCode Nerd Font" :size 14))
(setq default-text-properties '(line-spacing 0.4 line-height 1.4))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-city-lights)
;; (custom-theme-set-faces!
;;   '(font-lock-variable-name-face)
;;   )
;; (setq doom-theme 'doom-one)
;; (setq doom-theme 'doom-tokyo-night)

;; Theme Customisations
(when (display-graphic-p)
  (toggle-frame-maximized)
  (custom-theme-set-faces! 'doom-city-lights
     '(tree-sitter-hl-face:variable :foreground "#EBBF83")

     ;; Controls self in php
     '(tree-sitter-hl-face:variable.builtin :foreground "pink")

     ;; Alters property colours in php ->COLOUR
     ;; '(tree-sitter-hl-face:property :foreground "green")

     ;; These seem to do nothing (Tested in PHP)
     ;; '(tree-sitter-hl-face:variable.parameter :foreground "#ff0000")
     ;; '(tree-sitter-hl-face:variable.special :foreground "#ff0000")
     ;; '(tree-sitter-hl-face:property.definition :foreground "yellow")
    )
  )

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; iTerm Specific
(use-package! evil-terminal-cursor-changer
  :hook (tty-setup . evil-terminal-cursor-changer-activate))
;; End iTerm Specific

;; Remap split controls

(map!
  :after evil
  :leader
  :nvi "w -" #'evil-window-split
  :nvi "w |" #'evil-window-vsplit
  )

;; Terminal
(defun +vterm-toggle ()
  "Switch to terminal buffer or create and switch"
  (interactive)
  (if (get-buffer "*vterm*")
    (if (equal (get-buffer "*vterm*") (current-buffer))
      (evil-switch-to-windows-last-buffer)
      (switch-to-buffer "*vterm*")
      )
    (call-interactively #'+vterm/here)))

(map!
 :nvi "C-," #'+vterm-toggle
 )
;; End Terminal

;; Visualsoft Gupnode Implementation
(setq shell-file-name "zsh")
(setq shell-command-switch "-ic")
(defun vs/gupnode ()
  "Visualsoft Gupnode Support"
  (interactive)
  (if (and
         (stringp doom-modeline--project-root)
         (or
          (string= doom-modeline--project-root "/Users/markgraham-smith/Code/Projects/vscommerce3/")
          (string= doom-modeline--project-root "/Users/markgraham-smith/Code/Projects/vscommerce3/client_specifics/")
          )
         )
      (progn
        (let ((default-directory doom-modeline--project-root)) (shell-command (concat
                                                                                "gupnode "
                                                                                (read-string "Gupnode: ")
                                                                                )))
        (message "Done")
       )
    (message "fuck off?")
    )
  )

(setq tramp-verbose 10)

(map!
 :leader
 :n "v" #'vs/gupnode
 )

;; Keymaps

;; Comment them bad boys
(map!
 :nv "C-/" #'comment-line
 )

;; snipe em down (but w/ avy tho)
(after! evil-snipe
  (evil-define-key* '(motion normal) evil-snipe-local-mode-map
    "s" #'evil-avy-goto-char-2))

(map!
  :after evil-snipe
  :nv "s" #'evil-avy-goto-char-2
  )

;; Treesitter
(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

(setq-default flycheck-checker-error-threshold 1000)
(setq-default lsp-file-watch-threshold 50000)
(setq-default dtrt-indent-max-offset 4)
(setq-default tab-width 4)

;; Indirect Editing Setup
(defun +edit-indirect-set-mode-before-init (begin end)
  "Set the mode to be used by the indirect region, and then call indirect region"
  (interactive "r")
  (cond
   ((stringp mode-name)
    (setq indirect-region-mode mode-name))
   ((listp mode-name)
    (setq indirect-region-mode (nth 0 mode-name)))
   )

  (switch-to-buffer (edit-indirect-region begin end)))

(map!
  :leader
  :v "fi" #'+edit-indirect-set-mode-before-init
  )

(defun +edit-indirect-set-mode ()
  "A function to check the mode of the buffer and setting that mode when
a new indirect edit is started"
  (when (and (boundp 'indirect-region-mode) (stringp indirect-region-mode))
    (funcall
     (pcase indirect-region-mode
       ("Rustic" #'rustic-mode)
       ("Web" #'web-mode) ;; Has issues with PHP highlighting?
       ("PHP//l" #'php-mode)
       ("ELisp" #'emacs-lisp-mode)
       ))))

(add-hook 'edit-indirect-after-creation-hook '+edit-indirect-set-mode)
;; End Indirect Editing Setup

;; Web Mode
(after! web-mode
  (setq web-mode-script-padding 0)
  )

;; Org Mode
(after! org
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )

(set-face-foreground 'line-number-current-line "#EBBF83")
